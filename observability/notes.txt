Aggregator:
Aggregation in PromQL allows you to combine multiple time series into a single one, based on certain labels.
eg: sum(rate(node_cpu_seconds_total[5m]))
This query aggregates the CPU usage across all nodes.

avg(container_memory_usage_bytes) by (namespace)
This query provides the average memory usage grouped by namespace.


Using PromQL
1. Create Grafana Dashboard for your custom metrics:
  promql
   rate(http_request_count_total[5m])
   sum(inprogress_requests)

for custom metrics
  rate(http_requests_total[5m])
  http_requests_created 
  sum(http_requests_in_progress)
  pod per NS 
  sum by (namespace) (kube_pod_info)
  Pod restarts
  sum by (namespace) (kube_pod_container_status_restarts_total)
  node mem usage 
  (1 - (avg by (instance) (node_memory_MemAvailable_bytes) / avg by (instance) (node_memory_MemTotal_bytes))) * 100
  cluster cou usage
  100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
  CPU usage by pod
  sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (pod)


---terrascan notw
 - name: Check for High Risk Findings and fail build
      run: |
        STATUS=$(terrascan scan -o json | jq '.results.violation[] | select(.severity=="High")')
        if [ -n "$STATUS" ]; then
          echo "High risk issues found! Failing build."
          exit 1
        fi

    - name: Upload Terrascan report
      uses: actions/upload-artifact@v2
      with:
        name: terrascan-report
        path: terrascan-output.json